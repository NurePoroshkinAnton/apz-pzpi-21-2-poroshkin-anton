1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ СИСТЕМИ

Перед розробкою програмного забезпечення для IoT-пристрою в рамках програмної системи для управління кліматом у готельній мережі з можливістю синхронізації персональних профілів необхідно провести концептуальне моделювання системи.
В рамках системи IoT-пристрій виступатиме зв’язною ланкою між серверною частиною системи та пристроями для управління кліматом, встановленими в готельних номерах.
Відповідно, IoT-пристрою необхідно буде отримувати від серверної частини дані про готельний номер, в якому встановлено IoT-пристрій, список пристроїв для управління кліматом, встановлених у готельному номері та активний кліматичний профіль. На основі цих даних IoT-пристрій готуватиме запит на зміну кліматичних налаштувань для пристроїв для управління кліматом та надсилатиме його.
На основі відповіді, отриманої від пристроїв для управління кліматом, на випадок виникнення критичної ситуації, IoT-пристрій генеруватиме попередження для адміністрації готелю у вигляді листа на пошту, до якого буде включено інформацію про готельний номер та пристрій для управління кліматом, в роботі якого виникла помилка, з метою надання адміністрації готелю можливості коректно відреагувати на критичну ситуацію.
Результатом концпетуального моделювання системи стала UML діаграма прецедентів, наведена у додатку А.1. 

2 ОПИС РОЗРОБКИ ЗАСТОСУНКУ ДЛЯ ВБУДОВАНИХ СИСТЕМ
2.1 Обґрунтування архітектурних рішень проєкту

За основу для розробки програмного забезпечення для IoT-пристрою в рамках розроблюваної системи стала монолітна архітектура, як така, що дозволить забезпечити оптимальний обмін даними між різноманітними компонентами системи без додаткових витрат продуктивності, як це може відбуватись у мікросервісних системах, що стало б вагомим недоліком системи за умов обмеженої обчислювальної потужності IoT-пристрою.
Обмін даними між IoT-пристроєм та серверним застосунком в рамках системи відбуватиметься на основі технології Long Polling, що заснована на протоколі HTTP. Використання цієї технології дозволить уникнути створення та підтримання постійного каналу зв’язку між сервером та IoT-пристроєм, що матиме позитивний вплив на продуктивність цих двох компонентів системи.
Детальніше взаємодію IoT-пристрою та серверного застосунку продемонстровано у UML діаграмі взаємодії, яку наведено в додатку А.2. 

2.2 Опис використаних технологій

Цільовою платформою для запуску програмного забезпечення для IoT-пристрою став мікроконтролер ESP32 з підтримкою діалекту мови Python Micropython. Для спрощення процесу розробки для симуляції роботи вищезазначеного мікроконтролера було використано веб-застосунок Wokwi.
Протягом розробки застосунку для IoT-пристрою використовувалась низка бібліотек зі стандартного набору бібліотек ESP32, зокрема urequests для здійснення веб-запитів до серверу, ujson для обробки json-відповідей від сервера та network для підключення пристрою до локальної мережі готельного номеру тощо.
Окрім перелічених вище бібліотек зі стандартного набору ESP32 також були використані зовнішні бібліотеки, зокрема umail для відправки поштових повідомлень та logging для логування роботи IoT-пристрою. Код зовнішніх бібліотек було включено у вихідний код в якості окремих модулей застосунку.
Детальніше структуру розробленого застосунку наведено в UML діаграмі пакетів (рис. А.3.). 

2.3 Опис результатів розробки частини проекту для вбудованих систем

Результатом розробки програмного забезпечення для IoT-пристрою став застосунок, який забезпечує взаємодію між серверною частиною системи та пристроями для управління кліматом у готельних номерах.
Під час запуску пристрою проводиться його початкова конфігурація, зокрема зчитування налаштувань з конфігураційного файлу. Після чого починається основний цикл програми.
В основному циклі IoT-пристрій отримує інформацію про готельний номер, в якому його встановлено, список пристроїв для управління кліматом, встановлених у готельному номері та поточний активний кліматичний профіль.
На основі цих даних пристрій формує запити на зміну параметрів клімату до кожного з пристроїв управління кліматом, встановлених у номері та оброблює відповіді, надані вищеназваними пристроями.
Якщо у відповіді зазначено статус «Попередження» або «Помилка», IoT-пристрій генерує попередження для адміністрації готелю, до якого включено інформацію про готельний номер та пристрій для управління кліматом, в роботі якого виникла помилка, з метою надання адміністрації готелю можливості коректно відреагувати на критичну ситуацію. Створене попередження надсилається адміністрації готелю у вигляді поштового повідомлення за допомогою протоколу SMTP.
Детальніше принцип роботи IoT-пристрою наведено в UML діаграмі діяльності (рис. А.4). 

2.4 Опис результатів тестування частини проекту для вбудованих систем

Функціональне тестування  розробленого застосунку проводилось вручну, з використанням веб-емулятора Wokwi для спрощення процесу тестування.
Проведення функціонального тестування системи дозволило забезпечити стійкість системи до критичних ситуацій та упевнитись в стабільності роботи розробленого застосунку. 
 
ВИСНОВКИ

Протягом виконання роботи було розроблено програмне забезпечення для IoT-пристрою в рамках системи з відстеження історії автомобілів, описано прийняті інженерні рішення, побудувано діаграми, представлено будову системи та її взаємодію з іншими частинами системи. 
