1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Загалом система складатиметься з 5 основних компонентів, серед яких серверна частина, IoT-пристрій, браузерний та мобільний клієнт й окрема хмарна база даних.
Серед користувачів системи можемо виділити дві основні ролі: адміністрація готельної мережі та клієнти готельної мережі.
Щодо функціональних можливостей системи, то адміністратори готельних мереж повинні мати змогу реєструвати у системи власну готельну мережу, додавати інформації про готелі, готельні номери та пристрої управління кліматом, встановлені у готельних номерах, вносити у систему інформацію про клієнтів мережі у момент їх заселення у готель.
Клієнти готельних мереж повинні мати змогу реєструватись у системі, керувати персональними кліматичними профілями та активувати їх.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Протягом проєктування системи було прийнято рішення винести базу даних в окремий компонент системи, який буде розгорнуто за допомогою у хмарі за допомогою послуг хмарного провайдера, яким, наприклад, може стати AWS.
Серверний застосунок також планується розгорнути у хмарі з використанням послуг хмарного провайдера. Зв’язок між серверним застосунком та базою даних підтримуватиметься на основі протоколу, розробленого командою PostgreSQL, який побудовано над TCP/IP.
Мобільний та браузерний клієнти підтримуватимуть зв’язок з серверною частиною системи використовуючи HTTPS-запити.
Для синхронізації даних серверного застосунку та IoT-пристрою було обрано технологію Long polling, яка працює на основі протоколу HTTPS.
Результатом проєктування стала діаграма розгортання системи (рис. А.1). 

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Протягом проєктування було прийнято рішення за основу для розробки серверної частини проєкту обрати монолітну N-рівневу архітектуру, як таку, що забезпечить швидкодію системи завдяки відсутності необхідності обміну даними між окремими компонентами серверної частини.
Відповідно до принципів N-рівневої архітектури, серверний застосунок було розділено на три рівні: рівень представлення, рівень бізнес-логіки та рівень доступу до даних.
Рівень представлення описано класами-контролерами, до обов’язків яких входить обробка зовнішніх HTTP-запитів, передача виклику нижче за ланцюжком до рівня бізнес-логіки та формування відповіді клієнту. Рівень бізнес-логіки представлено класами-сервісами, у яких сконцентровані необхідні для оброки користувацьких запитів. Рівень даних представлений класами-репозиторіями, які надаються зовнішньою бібліотекою TypeORM та відповідають на запити з отримання чи збереження даних.
Для збереження низької зв’язності компонентів системи було використано шаблон проєктування впровадження залежностей (Dependency injection).  

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ


В рамках розробки серверного застосунку було проведене концептуальне моделювання системи.
Адміністратори системи повинні мати змогу створювати обліковий запис для власної готельної мережі, додавати інформацію про заклади готельної мережі, номери у закладах та пристрої управління кліматом, встановлені у даних номерах, а також додавати інформацію про клієнтів готельних мереж у момент їх заселення та вносити інформацію про статус проживання клієнта в готелі (проживає у певному готельному номері або не проживає у готелі).
Клієнти готельних мереж повинні мати змогу створювати персональний акаунт, додавати інформацію про персональні кліматичні профілі та вносити інформацію про поточний статус кліматичного профіля (активний або неактивний). Система повинна правильно оброблювати ситуації проживання декількох людей в одному готельному номері, що включає в себе генерацію попереджень в момент, коли один зі співмешканців намагається встановити кліматичний профіль активним за умови, що в даному готельному номері вже встановлено активний кліматичний профіль.
В результаті концептуального проєктування системи було створено діаграму прецедентів для адміністрації готельної мережі (рис. А.2) та клієнта готельної мережі (рис. А.3).
 
5 ПОБУДОВА ER-ДІАГРАМИ

На основі концептуального моделювання системи було виділено низку стрижневих сутностей системи, перелік яких наведено нижче.
Сутність «Компанія», зберігає інформацію про готельну мережу, серед якої назва, пошта для зв’язку з компанією (наприклад, для отримання повідомлень про помилку активації кліматичного профіля у номері) та геш паролю для авторизації.
Сутність «Готель», зберігає у собі інформацію про готель у складі готельної мережі, серед якої назва готелю та його адреса. Пов’язана ця сутність з сутністю «Компанія» зв’язком «багато до одного».
Сутність «Кімната» зберігає у собі інформацію про готельний номер, серед якої номер готелю. Пов’язана ця сутність з сутністю «Готель» зв’язком «багато до одного».
Сутність «Пристрій для керування кліматом» зберігає у собі інформацію про пристрої керування кліматом, встановлені у готельних номерах, серед якої тип пристрою для керування кліматом (на даний момент підтримується взаємодія з термостатами та гігростатами), IP-адреса пристрою в локальній мережі готельного номера для зв’язку IoT-пристрою з даним пристроєм для управління кліматом та його статус (ОК, є незначні проблеми, критичний стан). Пов’язана ця сутність з сутністю «Кімната» зв’язком «багато до одного».
Сутність «Клієнт» зберігає у собі інформацію про клієнта готельної мережі, серед якої ім’я клієнта, його пошта. Пов’язана ця сутність з сутністю «Кімната» зв’язком «жодного або багато до одного».
Сутність «Кліматичний профіль» зберігає у собі інформацію про набір кліматичних налаштувань, які клієнт готельної мережі вирішив винести в окремий профіль, серед якої назва профілю, рівень температури, рівень вологості, та позначка про те, чи є профіль активним на даний момент. Пов’язана ця сутність з сутністю «Клієнт» зв’язком «жодного або багато до одного».

Результатом проєктування системи стала ER-діаграма, яку наведено у додатку А.4.
 
6 СПЕЦИФІКАЦІЯ REST

Автентифікація та авторизація:
‒	POST auth/google/signin – реєстрація та авторизація клієнтів готельних мереж за допомогою Google OAuth;
‒	POST auth/signup/company – реєстрація облікового запису готельної мережі;
‒	POST auth/signin/company – авторизація адміністрації готельної мережі в рамках системи;
Робота з клієнтами готельних мереж:
‒	GET clients/:id – отримання клієнта за ідентифікатором у базі даних;
‒	POST clients/ – створення нового клієнта;
‒	PATCH clients/:id – оновлення інформації про клієнта за ідентифікатором у базі даних;
‒	DELETE clients/:id – видалення клієнта за ідентифікатором у базі даних;
Робота з готелями:
‒	GET hotels/ – отримання списку готелів;
‒	GET hotels/:id – отримання готелю за ідентифікатором у базі даних;
‒	POST hotels/ – створення нового готелю;
‒	PATCH hotels/:id – оновлення інформації про готель за ідентифікатором у базі даних;
‒	DELETE hotels/:id – видалення готелю за ідентифікатором у базі даних;
Робота з пристроями для управління кліматом:
‒	GET climate-devices/ – отримання списку пристроїв для управління кліматом;
‒	GET сlimate-devices/:id – отримання пристрою для управління кліматом за ідентифікатором у базі даних;
‒	POST climate-devices/ – створення нового готелю;
‒	PATCH climate-devices/:id – оновлення інформації про пристрій для управління кліматом за ідентифікатором у базі даних;
‒	DELETE climate-devices/:id – видалення пристрою для управління кліматом за ідентифікатором у базі даних;
Робота з кліматичними профілями:
‒	GET climate-profiles/ – отримання списку кліматичних профілів;
‒	GET сlimate-profiles/:id – отримання кліматичного профіля за ідентифікатором у базі даних;
‒	POST climate-profiles/ – створення нового кліматичного профіля;
‒	PATCH climate-profiles/:id – оновлення інформації про кліматичний профіль за ідентифікатором у базі даних;
‒	DELETE climate-profiles/:id – видалення кліматичного профілю за ідентифікатором у базі даних;
Робота з готельними мережами:
‒	PATCH companies/:id – оновлення інформації про готельну мережу за ідентифікатором у базі даних;
Робота з готельними номерами:
‒	GET rooms/ – отримання списку готельних номерів;
‒	GET rooms/:id – отримання готельного номеру за ідентифікатором у базі даних;
‒	POST rooms/ – створення нового готельного номеру;
‒	PATCH rooms/:id – оновлення інформації про готельний номер за ідентифікатором у базі даних;
‒	DELETE rooms/:id – видалення готельного номеру за ідентифікатором у базі даних;
‒	GET rooms/number-by-id – отримання номеру кімнати за її ідентифікатором у базі даних;
‒	GET rooms/active-profile – отримання активного кліматичного профіля для номера;
‒	POST rooms/set-profile-active – встановлення кліматичного профіля активним для готельного номера;
Варто зауважити, що усі групи точок входу, окрім точок входу для авторизації та автентифікації, потребують передачі токену доступу в авторизаційних заголовках запиту, за допомогою чого серверна частина системи отримуватиме інформацію про користувача, який здійснює запит. При відсутності токена доступу сервер повертатиме помилку 401 Unauthorized. При порушенні структури токена доступу або недостатній кількості прав користувача, сервер повертатиме помилку 403 Forbidden. 

7 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Для розподілу серверного застосунку на окремі пакети було використано підхід Feature-slice design.
Цей підхід передбачає створення одного головного пакету, який стає точкою входу в застосунок, і окремих пакетів для кожної з основних функцій системи.
Точкою входу в застосунок став пакет App, в якому відбувається імпорт решти пакетів, конфігурація застосунку, підключення middlewares та власне запуск застосунку.
Далі для кожної з основних функцій системи, до списку яких входить авторизація та автентифікація, робота з клієнтами, робота з кліматичними пристроями, робота з кліматичними профілями, робота готелями, робота з готельними номерами було створено відповідні пакети: auth, clients, climate-devices, climate-profiles, companies, hotels, rooms. 
Кожен з цих пакетів (які також називаються слайсами) включає в себе 3 файли: контролер, сервіс та модуль (використовується для налаштування впровадження залежностей).
Також, кожен з цих пакетів включає в себе низку підпакетів. Далі наведено загальний перелік можливих підпакетів у слайсі:
‒	entities – список сутностей, з якими проводиться робота в даному слайсі;
‒	dto – описує Data transfer objects, сутності, які задають формат обміну даними між серверним застосунком та клієнтами;
‒	types – містить у собі файли з деклараціями типів, що перевикористовуються в рамках даного слайса.
За необхідності у слайсі також можуть створюватись додаткові підпакети. Детальніше структуру пакетів застосунку відображено на рисунку А.5.
 
ВИСНОВКИ

Протягом виконання лабораторної роботи було розроблено серверну частину програмної системи з відстеження історії автомобілів, наведено опис прийнятих інженерних рішень, представлено загальної архітектури системи, показано будову серверних компонентів та структури бази даних.
